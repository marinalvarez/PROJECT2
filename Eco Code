 const byte adcPin = 0;  // A0
#define LOG_OUT 1 // use the log output function
#define FHT_N 32 // set to 256 point fht

#include <FHT.h> // include the library

bool working;
int i = 0, j = 0;

//auxiliar variables for mean function
int _a = 0, _b = 0;
long _sum = 0;
int vibrator3 = 3;      //Define the pins where the vibrators will be located
int vibrator5 = 5;
int vibrator6 = 6;
int vibrator9 = 9;
int vibrator10 = 10;

void setup () {

  pinMode(vibrator3, OUTPUT);    //Define the pin of the vibrators as an output 
  pinMode(vibrator5, OUTPUT);
  pinMode(vibrator6, OUTPUT);
  pinMode(vibrator9, OUTPUT);
  pinMode(vibrator10, OUTPUT);

  Serial.begin (115200);
  Serial.println ();

  ADCSRA =  bit (ADEN);   // turn ADC on
  ADCSRA |= bit (ADPS0) | bit (ADPS1) | bit (ADPS2);
  ADMUX =   bit (REFS0) | (adcPin & 0x07);  // AVcc
}

void loop ()
{
  if (!working) {

    bitSet (ADCSRA, ADSC);  // start a conversion
    working = true;
  }

  // the ADC clears the bit when done
  if (bit_is_clear(ADCSRA, ADSC))
  {
    cli();
    byte m = ADCL; // fetch adc data
    byte j = ADCH;
    int k = (j << 8) | m; // form into an int
    k -= 0x0200; // form into a signed int
    k <<= 6; // form into a 16b signed int
    fht_input[i] = k; // put real data into bins
    working = false;
    sei();

    _b++;
    if (_b >= 2) {
      i++;
      _b = 0;
    }

    if (i >= FHT_N) {

      int m = mean(fht_input, FHT_N);

      for (_a = 0; _a < FHT_N; _a++) {
        fht_input[_a] -= m;
      }

      fht_window(); // window the data for better frequency response
      fht_reorder(); // reorder the data before doing the fht
      fht_run(); // process the data in the fht
      fht_mag_log(); // take the output of the fht

      Serial.write(255); // send a start byte
      Serial.write(fht_log_out, FHT_N / 2); // send out the data
      i = 0;

      digitalWrite(vibrator3, constrain(map(fht_log_out[2], 64, 255, 0, 255), 0, 255));  //constrain the vibrators to receive the Hz of the frecuencies and translate it to power in the range defined.   
      digitalWrite(vibrator5, constrain(map(fht_log_out[5], 64, 255, 0, 255), 0, 255));  // use the vector fht_log_out[] to select the bar of frecuency that belong to each vibrator.
      digitalWrite(vibrator6, constrain(map(fht_log_out[8], 64, 255, 0, 255), 0, 255));
      digitalWrite(vibrator9, constrain(map(fht_log_out[11], 64, 255, 0, 255), 0, 255));
      digitalWrite(vibrator10, constrain(map(fht_log_out[14], 64, 255, 0, 255), 0, 255));
      
    }
  }
}

int mean(int* vec, int len) {

  _sum = 0;
  for (_a = 0 ; _a < len ; _a++) {
    _sum += vec[_a];
  }
  return _sum / len;
}
